(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{801:function(a,s,e){"use strict";e.r(s);var t=e(70),n=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"agregar-configuracion-de-base-de-datos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#agregar-configuracion-de-base-de-datos"}},[a._v("#")]),a._v(" Agregar configuración de base de datos")]),a._v(" "),e("p",[a._v("Entonces, ahora que aprendió qué es MongoDB, aprendió sobre Mongoose e instaló el servidor "),e("strong",[a._v("mongod")]),a._v(" en su computadora, es hora de agregarlo a nuestro proyecto.")]),a._v(" "),e("p",[a._v("En primer lugar, verifique si su servidor mongod está "),e("a",{attrs:{href:""}},[a._v("ejecutándose")]),a._v(". Luego, "),e("a",{attrs:{href:""}},[a._v("instalar")]),a._v(" el "),e("strong",[a._v("paquete de mongoose")]),a._v(". Finalmente, conecte la Mongoose al servidor mongod. Necesitamos configurar la conexión en nuestro archivo app.js. Entonces, primero impórtelo y luego configúrelo de la siguiente manera (puede agregarlo justo después de importar las rutas):")]),a._v(" "),e("div",{staticClass:"language-JS extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// app.js")]),a._v("\nmongoose"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("connect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'mongodb://127.0.0.1:27017/solodb'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("err")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Successfully connected to .'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("Utilizamos el método de conexión y pasamos la URL de la base de datos. Finalmente, usamos la devolución de llamada para arrojar el error en caso de falla y devolver un mensaje de éxito de lo contrario.")]),a._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),e("p",[a._v("Ahora, si inicia su servidor, recibirá el mensaje de éxito. Para fines de prueba, puede cambiar la URL a algo incorrecto y ver qué sucederá.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);