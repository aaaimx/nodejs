(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{802:function(t,s,a){"use strict";a.r(s);var e=a(70),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"add-database-setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-database-setup"}},[t._v("#")]),t._v(" Add Database Setup")]),t._v(" "),a("p",[t._v("So, now that youâ€™ve learned what MongoDB is, learned about Mongoose, and installed "),a("strong",[t._v("mongod")]),t._v(" server on your computer, it's time to add it to our project.")]),t._v(" "),a("p",[t._v("First of all, check if your mongod server is "),a("a",{attrs:{href:""}},[t._v("running")]),t._v(" . Next, "),a("a",{attrs:{href:""}},[t._v("install")]),t._v(" the "),a("strong",[t._v("mongoose package")]),t._v(". Finally, connect the Mongoose to the mongod server. We need to set up the connection in our app.js file. So, first import it and then set it up as follows (you can add it just after importing the routes):")]),t._v(" "),a("div",{staticClass:"language-JS extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// app.js")]),t._v("\nmongoose"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mongodb://127.0.0.1:27017/solodb'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Successfully connected to .'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("We used the connect method and passed the database URL. Finally, we used the callback to throw the error in case of failure and return a success message otherwise.")]),t._v(" "),a("blockquote",[a("p",[t._v("Now, if you start your server, you will get the success message. For testing purposes, you can change the URL to something wrong, and see what will happen.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);