(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{817:function(t,e,a){"use strict";a.r(e);var s=a(70),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"readable-stream-events"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readable-stream-events"}},[t._v("#")]),t._v(" Readable Stream Events")]),t._v(" "),a("p",[a("strong",[t._v("Readable Streams")]),t._v(" let you read data from a source (the source can be a file, a connection, or any data provider).")]),t._v(" "),a("p",[t._v("Readable Streams have two modes, "),a("strong",[t._v("flowing")]),t._v(" and "),a("strong",[t._v("paused")]),t._v(", which affect the way we can use them:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("flowing")]),t._v(": In this mode, data is read from the system automatically and provided to an application as fast as possible using events (EventEmitters).")]),t._v(" "),a("li",[a("strong",[t._v("paused")]),t._v(": In this mode, the "),a("code",[t._v("read()")]),t._v(" method must be called   explicitly to read the data from the stream (a chunk of data). Use the "),a("code",[t._v("pause()")]),t._v(" method to pause the stream.")])]),t._v(" "),a("p",[a("em",[t._v("Readable will not generate data until the provided data is "),a("strong",[t._v("consumed or ignored")]),t._v(". If the consuming mechanism is disabled or removed, the Readable will attempt to stop generating the data.")])]),t._v(" "),a("p",[t._v("Here, we will cover the common events of Readable Streams:")]),t._v(" "),a("p",[t._v("'"),a("strong",[t._v("close")]),t._v("': This event indicates that no more events will be emitted. It is emitted when the stream and any of its resources have been closed.")]),t._v(" "),a("p",[t._v("'"),a("strong",[t._v("data")]),t._v("': This event is emitted when the stream gives data to the consumer. This happens when there is an available 'data' event listener, the stream is switched to "),a("strong",[t._v("flowing mode")]),t._v(" either by the "),a("code",[t._v("pipe()")]),t._v(" or "),a("code",[t._v("resume()")]),t._v(" methods or when the "),a("code",[t._v("read()")]),t._v(" method is called with available data.")]),t._v(" "),a("p",[t._v("Suppose we have a file with a size of approximately 150MB:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" readable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./file.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nreadable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("chunk")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Received ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("chunk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(" bytes of data.")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("em",[t._v("readable")]),t._v(" will listen to the 'data' event and call the callback when it's emitted.")]),t._v(" "),a("p",[a("em",[t._v("If you attach a 'data' event listener to a stream that has not been paused manually, the stream will be switched to flowing mode and the data will be passed when it becomes available.")])]),t._v(" "),a("p",[t._v("'"),a("strong",[t._v("end")]),t._v("': This event will be emitted when there is no more data available from the stream (entirely consumed).\nFor example, let's add the following part to the last code snippet:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\nreadable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'There is no more data.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("In addition to the 'data' listener above, this one will also listen to the 'end' event and trigger the callback whenever the 'end' is emitted.")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("em",[t._v("The 'error' event can be emitted at any time. Reasons for this event are if the system fails to generate data, or if there is an invalid chunk of data.")])])])}),[],!1,null,null,null);e.default=n.exports}}]);