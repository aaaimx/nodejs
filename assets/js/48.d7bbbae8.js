(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{768:function(s,t,a){"use strict";a.r(t);var e=a(70),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"ruta-de-users-get-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ruta-de-users-get-js"}},[s._v("#")]),s._v(" Ruta de users (GET) js")]),s._v(" "),a("p",[s._v("Necesitamos tener todas nuestras cosas específicas de la API, como "),a("strong",[s._v("rutas")]),s._v(", en un solo lugar. Así que creemos un directorio '"),a("strong",[s._v("api")]),s._v("' y un subdirectorio de 'rutas', donde guardaremos nuestros archivos '"),a("strong",[s._v("codes.js")]),s._v("' y '"),a("strong",[s._v("users.js")]),s._v("'. Entonces, la "),a("strong",[s._v("estructura")]),s._v(" es la siguiente:")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(".\n├── api\n│      │\n│      └── routes\n│               ├── codes.js\n│               └── users.js\n├── app.js\n├── package.json\n└── server.js\n2 directories, 5 files\n")])])]),a("p",[s._v("Ahora que tenemos el archivo "),a("strong",[s._v("api/routes/users.js")]),s._v(", creemos nuestra primera ruta de usuario (GET) que devolverá a todos los usuarios. El archivo "),a("strong",[s._v("api/routes/users.js")]),s._v(" contendrá todas las rutas relacionadas con los usuarios.")]),s._v(" "),a("p",[s._v("Abra el archivo api/routes/users.js e importe el módulo 'express'. Necesitamos llamar al método "),a("strong",[s._v("Router()")]),s._v(" en la instancia Express para usar las funcionalidades de enrutamiento:")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// users.js")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" express "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'express'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" router "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" express"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Router")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Ahora, necesitamos usar el enrutador para implementar manejadores de solicitud (handlers) de la API para el usuario "),a("strong",[s._v("resource")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// users.js")]),s._v("\nrouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("status")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("json")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    message"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Handling GET request of the /users'")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[a("strong",[s._v("get()")]),s._v(" es un método que toma dos argumentos. El primero es el "),a("em",[s._v("URL")]),s._v("* y el segundo argumento es la función "),a("strong",[s._v("handler")]),s._v(". No hay nada nuevo en el cuerpo del controlador (handler), donde responde con el estado de 200 en formato JSON con un mensaje personalizado.")]),s._v(" "),a("blockquote",[a("p",[s._v("Tenga en cuenta que el primer argumento del método get () es URL, y solo estamos usando una barra diagonal (/). Pero queremos que nuestra ruta sea /localhost:3000/users/. Para eso, necesitamos algunas modificaciones en el archivo app.js.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);